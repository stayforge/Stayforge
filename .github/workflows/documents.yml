name: Update Wiki and Documentation

on:
  workflow_dispatch: # Allows manual trigger of the workflow
  push:              # Trigger workflow on changes in specific files or directories
    paths:
      - .github/workflows/documents.yml
      - docs/wiki/**   # Trigger on changes in Wiki documentation
      - openapi.json   # Trigger on changes to OpenAPI specification
      - app.py         # Trigger on changes to the Python script
      - requirements.txt # Trigger on dependency changes

jobs:
  # Job 1: Update Wiki documentation
  update-wiki:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the source repository
      - name: Checkout source repository
        uses: actions/checkout@v3

      # Step 2: Push updated Wiki documentation to the Stayforge.wiki repository
      - name: Push Documentation to Stayforge.wiki
        run: |
          # Configure Git user for pushing changes
          git config --global user.name "Tokujunsystems-BOT"
          git config --global user.email "190532409+Tokujunsystems-BOT@users.noreply.github.com"
          # Clone the target Wiki repository
          git clone https://x-access-token:${{ secrets.BOT_PAT }}@github.com/tokujun-t/Stayforge.wiki.git Stayforge.wiki
          # Copy the updated Wiki documentation
          cp -r docs/wiki/* Stayforge.wiki/
          # Commit and push changes to the Wiki repository
          cd Stayforge.wiki
          git add .
          git commit -m "Update Wiki Documentation [skip ci]" || echo "No changes to commit"
          git push origin master
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }} # GitHub personal access token for authentication

  # Job 2: Update the main documentation repository
  update-docs:
    runs-on: ubuntu-latest
    needs: update-wiki # Ensure this job runs after the Wiki update
    steps:
      # Step 1: Check out the source repository
      - name: Checkout source repository
        uses: actions/checkout@v3

      # Step 2: Get the current branch name and tag
      - name: Get current branch name and tag
        id: vars
        run: |
          # Retrieve the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            # If the reference is a branch
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            COMMIT_SHA=$(git rev-parse --short HEAD)
            TAG=${LATEST_TAG}-${COMMIT_SHA}
            echo "branch_name=${BRANCH_NAME}" >> $GITHUB_ENV
            echo "TAG=${TAG}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # If the reference is a tag
            TAG=${GITHUB_REF#refs/tags/}
            echo "TAG=${TAG}" >> $GITHUB_ENV
          else
            # Default to a dev tag
            echo "TAG=${LATEST_TAG}-dev" >> $GITHUB_ENV
          fi
          echo "Generated TAG=${TAG}"

      # Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Use Python 3.10

      # Step 4: Install Python dependencies
      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt

      # Step 5: Generate OpenAPI JSON from the Python application
      - name: Generate OpenAPI JSON
        run: |
          python app.py

      # Step 6: Setup Node.js environment and install Widdershins
      - name: Setup Node.js and Install Widdershins
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Widdershins
        run: npm install -g widdershins

      # Step 7: Generate Markdown documentation from OpenAPI JSON
      - name: Generate Markdown Docs
        run: |
          widdershins openapi.json -o api-docs.md

      # Step 8: Push generated documentation to the target repository
      - name: Push Documentation to Target Repository
        if: env.TAG != '' # Only push if a valid tag is generated
        run: |
          # Configure Git user for pushing changes
          git config --global user.name "Tokujunsystems-BOT"
          git config --global user.email "190532409+Tokujunsystems-BOT@users.noreply.github.com"
          # Clone the target documentation repository
          git clone https://x-access-token:${{ secrets.BOT_PAT }}@github.com/tokujun-t/Stayforge-Documents.git Stayforge-Documents
          cd Stayforge-Documents
          # Checkout or create the branch for updates
          git checkout ${BRANCH_NAME} || git checkout -b ${BRANCH_NAME}
          git pull origin ${BRANCH_NAME} --rebase
          # Copy the generated documentation to the repository
          cp ../api-docs.md .
          # Commit and push changes to the documentation repository
          git add .
          git commit -m "Update Documentation for ${TAG} [skip ci]" || echo "No changes to commit"
          git push origin ${BRANCH_NAME}
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }} # GitHub personal access token for authentication