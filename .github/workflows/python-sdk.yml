name: Python SDK CI

on:
  release:
    types:
      - published
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  generate-sdk:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out source sa_repository
      - name: Checkout source sa_repository
        uses: actions/checkout@v3

      # Step 2: Get the current branch name and tag
      - name: Get current branch name and tag
        id: vars
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
      
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            echo "branch_name=${BRANCH_NAME}" >> $GITHUB_ENV
      
            # Get the short SHA of the current commit
            COMMIT_SHA=$(git rev-parse --short HEAD)
            echo "TAG=${LATEST_TAG}-${COMMIT_SHA}" >> $GITHUB_ENV
            echo "Using branch '${BRANCH_NAME}', generated TAG '${LATEST_TAG}-${COMMIT_SHA}'"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # If there is already a label, use the label directly
            TAG=${GITHUB_REF#refs/tags/}
            echo "TAG=${TAG}" >> $GITHUB_ENV
          else
            # If neither, use the default tag and dev tags
            echo "TAG=${LATEST_TAG}-dev" >> $GITHUB_ENV
          fi
      
          echo "Generated TAG=${TAG}"

      # Step 3: Install Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Python version used

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt

      # Step 5: Generate OpenAPI JSON
      - name: Generate OpenAPI JSON
        run: |
          python app.py

      # Step 6: Update package version in config.yaml
      - name: Update package version in config.yaml
        run: |
          if [[ -f ".github/openapi/config.yaml" ]]; then
            sed -i "s/^packageVersion:.*$/packageVersion: ${TAG}/" .github/openapi/config.yaml
          else
            echo "Error: .github/openapi/config.yaml not found!"
            exit 1
          fi

      # Step 7: Download OpenAPI Generator CLI
      - name: Download OpenAPI Generator CLI
        run: |
          curl -o openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.9.0/openapi-generator-cli-7.9.0.jar

      # Step 8: Generate Python SDK
        if: env.TAG != ''
      - name: Generate Python SDK
        run: |
          java -jar openapi-generator-cli.jar generate \
          -i ./openapi.json \
          -g python \
          -o ./package_output \
          -c .github/openapi/config.yaml \
          --enable-post-process-file

      # Step 9: Push Python SDK to target sa_repository
      - name: Push Python SDK to target sa_repository
        if: env.TAG != ''
        run: |
          git config --global user.name "Tokujunsystems-BOT"
          git config --global user.email "190532409+Tokujunsystems-BOT@users.noreply.github.com"
          git clone https://x-access-token:${BOT_PAT}@github.com/tokujun-t/stayforge-python.git stayforge-python
          cd stayforge-python
          git checkout ${BRANCH_NAME} || git checkout -b ${BRANCH_NAME}
          git pull origin ${BRANCH_NAME} --rebase
          cp -r ../package_output/* .
          git add .
          git commit -m "Update Python SDK [skip ci]" || echo "No changes to commit"
          git push origin ${BRANCH_NAME}
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }}
